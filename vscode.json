{
    "snippet-czip": {
        "prefix": "czip",
        "body": "func createZip(name string, files []string) error {\n\tzipFile, err := os.Create(name)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer zipFile.Close()\n\n\tzWriter := zip.NewWriter(zipFile)\n\n\tfor _, fName := range files {\n\t\treader, err := os.Open(fName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\twriter, err := zWriter.Create(fName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t_, err = io.Copy(writer, reader)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif err = reader.Close(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\terr = zWriter.Close()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}",
        "description": "Create zip file"
    },
    "snippet-ezip": {
        "prefix": "ezip",
        "body": "func extractZip(name string, extractTo string) error {\n\tzReader, err := zip.OpenReader(name)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer zReader.Close()\n\n\tif err = os.MkdirAll(extractTo, os.ModePerm); err != nil {\n\t\treturn err\n\t}\n\n\tfor _, f := range zReader.File {\n\t\tdestpath := filepath.Join(extractTo, f.Name)\n\n\t\tif !strings.HasPrefix(destpath, filepath.Clean(extractTo)+string(os.PathSeparator)) {\n\t\t\treturn errors.New(\"zip slip\")\n\t\t}\n\n\t\trc, err := f.Open()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif f.FileInfo().IsDir() {\n\t\t\tif err = os.MkdirAll(destpath, os.ModePerm); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t} else {\n\t\t\tif err = os.MkdirAll(filepath.Dir(destpath), os.ModePerm); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\textractedF, err := os.Create(destpath)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif _, err = io.Copy(extractedF, rc); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif err = extractedF.Close(); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\tif err = rc.Close(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}",
        "description": "Extract zip file"
    },
    "snippet-ctar": {
        "prefix": "ctar",
        "body": "func createTar(name string, files []string) error {\n\tfWriter, err := os.Create(name)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer fWriter.Close()\n\n\twriter := tar.NewWriter(fWriter)\n\n\tfor _, fName := range files {\n\t\treader, err := os.Open(fName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tstat, err := reader.Stat()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\thdr := &tar.Header{\n\t\t\tName: fName,\n\t\t\tMode: 0600,\n\t\t\tSize: stat.Size(),\n\t\t}\n\t\tif err := writer.WriteHeader(hdr); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif _, err := io.Copy(writer, reader); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif err = reader.Close(); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err = writer.Close(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}",
        "description": "Create tar file"
    },
    "snippet-etar": {
        "prefix": "etar",
        "body": "func extractTar(name string, extractTo string) error {\n\tfReader, err := os.Open(name)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer fReader.Close()\n\n\treader := tar.NewReader(fReader)\n\n\tif err = os.MkdirAll(extractTo, os.ModePerm); err != nil {\n\t\treturn err\n\t}\n\n\tfor {\n\t\thdr, err := reader.Next()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdestpath := filepath.Join(extractTo, hdr.Name)\n\t\tif !strings.HasPrefix(destpath, filepath.Clean(extractTo)+string(os.PathSeparator)) {\n\t\t\treturn errors.New(\"zip slip\")\n\t\t}\n\n\t\tif hdr.FileInfo().IsDir() {\n\t\t\tif err = os.MkdirAll(destpath, os.ModePerm); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t} else {\n\t\t\tif err = os.MkdirAll(filepath.Dir(destpath), os.ModePerm); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\twriter, err := os.Create(destpath)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif _, err = io.Copy(writer, reader); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif err = writer.Close(); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}",
        "description": "Extract tar file"
    },
    "snippet-esymmetric": {
        "prefix": "esymmetric",
        "body": "func encryptSymmetric(hashedPassword []byte, plaintext []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher(hashedPassword)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tnonce := make([]byte, 12)\n\tif _, err := rand.Read(nonce); err != nil {\n\t\treturn nil, err\n\t}\n\n\taesgcm, err := cipher.NewGCM(block)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn aesgcm.Seal(nil, nonce, plaintext, nil), nil\n}",
        "description": "Symmetric encryption"
    },
    "snippet-encryptconn": {
        "prefix": "encryptconn",
        "body": "func encryptConnect(selfSignedPEM []byte, addr string) (*tls.Conn, error) {\n\troots := x509.NewCertPool()\n\n\tok := roots.AppendCertsFromPEM([]byte(selfSignedPEM))\n\tif !ok {\n\t\treturn nil, errors.New(\"append cert failed\")\n\t}\n\n\treturn tls.Dial(\"tcp\", addr, &tls.Config{RootCAs: roots})\n}",
        "description": "Encrypt connect to server"
    },
    "snippet-cquery": {
        "prefix": "cquery",
        "body": "func query(ctx context.Context, db *sql.DB, id int, limit int) ([]int64, error) {\n\trows, err := db.QueryContext(ctx, \"SELECT id FROM users WHERE id > ? LIMIT ?\", id, limit)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\tresults := make([]int64, 0, limit)\n\tfor rows.Next() {\n\t\tvar id int64\n\t\trows.Scan(&id)\n\t\tresults = append(results, id)\n\t}\n\treturn results, nil\n}",
        "description": "Sql query with context"
    },
    "snippet-cqueryrow": {
        "prefix": "cqueryrow",
        "body": "func queryRow(ctx context.Context, db *sql.DB, id int) (string, error) {\n\tvar name string\n\terr := db.QueryRowContext(ctx, \"SELECT name FROM users WHERE id = ?\").Scan(&name)\n\treturn name, err\n}",
        "description": "Sql row query with context"
    },
    "snippet-cupsertrows": {
        "prefix": "cupsertrows",
        "body": "func upsertRows(ctx context.Context, db *sql.DB, rows []string) error {\n\ttx, err := db.BeginTx(ctx, &sql.TxOptions{Isolation: sql.LevelSerializable})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tstmt, err := tx.PrepareContext(ctx, \"INSERT INTO users (name) VALUES (?) ON DUPLICATE KEY UPDATE name = ?\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfor i := 0; i < len(rows); i++ {\n\t\t_, err := stmt.ExecContext(\n\t\t\tctx,\n\t\t\trows[i],\n\t\t\trows[i],\n\t\t)\n\t\tif err != nil {\n\t\t\tif errR := tx.Rollback(); errR != nil {\n\t\t\t\treturn errR\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif err = tx.Commit(); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}",
        "description": "Upsert rows with context"
    },
    "snippet-parsecsv": {
        "prefix": "parsecsv",
        "body": "func parseCSV(name string) (<-chan []string, error) {\n\tfile, err := os.Open(name)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treader := csv.NewReader(file)\n\tout := make(chan []string)\n\tgo func() {\n\t\tfor {\n\t\t\trecord, err := reader.Read()\n\t\t\tif err != nil {\n\t\t\t\tfile.Close()\n\t\t\t\tclose(out)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tout <- record\n\t\t}\n\t}()\n\n\treturn out, nil\n}",
        "description": "Parse csv file"
    },
    "snippet-writecsv": {
        "prefix": "writecsv",
        "body": "func writeCsv(name string, rows <-chan []string) error {\n\tfWriter, err := os.Create(name)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer fWriter.Close()\n\n\twriter := csv.NewWriter(fWriter)\n\tfor row := range rows {\n\t\tif err := writer.Write(row); err != nil {\n\t\t\treturn err\n\t\t}\n\t\twriter.Flush()\n\t}\n\n\treturn nil\n}",
        "description": "Write csv file"
    },
    "snippet-sendmultipart": {
        "prefix": "sendmultipart",
        "body": "func sendMultipart(url string, field string, name string) (*http.Response, error) {\n\tr, w := io.Pipe()\n\tmWriter := multipart.NewWriter(w)\n\n\tgo func() {\n\t\tdefer w.Close()\n\t\tdefer mWriter.Close()\n\n\t\tfWriter, err := mWriter.CreateFormFile(field, name)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tfile, err := os.Open(name)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tdefer file.Close()\n\n\t\tif _, err = io.Copy(fWriter, file); err != nil {\n\t\t\treturn\n\t\t}\n\t}()\n\n\treturn http.Post(url, mWriter.FormDataContentType(), r)\n}",
        "description": "Send file in multipart"
    },
    "snippet-receivemultipart": {
        "prefix": "receivemultipart",
        "body": "func receiveMultipart(w http.ResponseWriter, r *http.Request) {\n\tr.ParseMultipartForm(32 << 20)\n\tfile, _, err := r.FormFile(\"upload\")\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\treader := bufio.NewReader(file)\n\tb, _ := reader.Peek(512)\n\tcontentType := http.DetectContentType(b)\n\tif !strings.HasPrefix(contentType, \"image\") {\n\t\treturn\n\t}\n\n\ttmp, err := ioutil.TempFile(\"\", \"\")\n\tif err != nil {\n\t\treturn\n\t}\n\n\t_, err = io.Copy(tmp, file)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tif err = tmp.Close(); err != nil {\n\t\treturn\n\t}\n}",
        "description": "Receive file in multipart"
    },
    "snippet-escapehtml": {
        "prefix": "escapehtml",
        "body": "func escapeHTML(w io.Writer, b []byte) {\n\ttemplate.HTMLEscape(w, b)\n}",
        "description": "Escape HTML"
    },
    "snippet-escapejs": {
        "prefix": "escapejs",
        "body": "func escapeJS(w io.Writer, b []byte) {\n\ttemplate.JSEscape(w, b)\n}",
        "description": "Escape JS"
    },
    "snippet-encryptlisten": {
        "prefix": "encryptlisten",
        "body": "func encryptListen() error {\n\tvar certPem, keyPem []byte\n\tcert, err := tls.X509KeyPair(certPem, keyPem)\n\tif err != nil {\n\t\treturn err\n\t}\n\tcfg := &tls.Config{Certificates: []tls.Certificate{cert}}\n\tl, err := tls.Listen(\"tcp\", \":2000\", cfg)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer l.Close()\n\tfor {\n\t\tconn, err := l.Accept()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgo func(c net.Conn) {\n\t\t\tio.Copy(c, c)\n\t\t\tc.Close()\n\t\t}(conn)\n\t}\n}",
        "description": "Encrypt listen to client"
    },
    "snippet-get": {
        "prefix": "get",
        "body": "res, err := http.Get(\"http://example.com\")\nif res != nil {\n\tdefer res.Body.Close()\n}\nif err != nil {\n\treturn err\n}\nbody, err := ioutil.ReadAll(res.Body)\nif err != nil {\n\treturn err\n}",
        "description": "send GET"
    },
    "snippet-pubstruct": {
        "prefix": "pubstruct",
        "body": "func publicStruct() ([]byte, error) {\n\ttype omit *struct{}\n\ttype priv struct {\n\t\tPassword string `json:\"password\"`\n\t}\n\ttype pub struct {\n\t\t*priv\n\t\tPassword omit `json:\"password,omitempty\"`\n\t}\n\treturn json.Marshal(pub{priv: &priv{\"password\"}})\n}",
        "description": "Public struct with embedded private struct"
    },
    "snippet-newservice": {
        "prefix": "newservice",
        "body": "func newService() {\n\tmanager := &autocert.Manager{\n\t\tCache:      autocert.DirCache(\"cache-dir\"),\n\t\tPrompt:     autocert.AcceptTOS,\n\t\tHostPolicy: autocert.HostWhitelist(\"example.come\", \"www.example.come\"),\n\t}\n\trouter := httprouter.New()\n\tvar userHandler = func(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n\t\tvar _ = \"process\"\n\t}\n\tvar withMiddleware = func(h httprouter.Handle) httprouter.Handle {\n\t\tvar _ = \"intercept\"\n\t\treturn func(w http.ResponseWriter, r *http.Request, params httprouter.Params) {\n\t\t\th(w, r, params)\n\t\t}\n\t}\n\trouter.GET(\"/user/:id\", withMiddleware(userHandler))\n\tserver := &http.Server{\n\t\tAddr:         \":https\",\n\t\tReadTimeout:  5 * time.Second,\n\t\tWriteTimeout: 10 * time.Second,\n\t\tIdleTimeout:  120 * time.Second,\n\t\tTLSConfig:    manager.TLSConfig(),\n\t\tHandler:      router,\n\t}\n\tserver.ListenAndServeTLS(\"\", \"\")\n}",
        "description": "Scaffold a service"
    },
    "snippet-withtrace": {
        "prefix": "withtrace",
        "body": "func withTrace(req *http.Request) *http.Request {\n\ttrace := &httptrace.ClientTrace{\n\t\tGotConn: func(connInfo httptrace.GotConnInfo) {\n\t\t\tfmt.Printf(\"Got Conn: %+v\\n\", connInfo)\n\t\t},\n\t\tDNSDone: func(dnsInfo httptrace.DNSDoneInfo) {\n\t\t\tfmt.Printf(\"DNS Info: %+v\\n\", dnsInfo)\n\t\t},\n\t}\n\treturn req.WithContext(httptrace.WithClientTrace(req.Context(), trace))\n}",
        "description": "Trace HTTP request"
    },
    "snippet-everysecond": {
        "prefix": "everysecond",
        "body": "c := time.Tick(1 * time.Second)\nfor now := range c {\n\tfmt.Printf(\"%v\\n\", now)\n}",
        "description": "Run every second"
    },
    "snippet-afteronesec": {
        "prefix": "afteronesec",
        "body": "select {\ncase <-time.After(1 * time.Second):\n\tfmt.Println(\"timed out\")\n}",
        "description": "After one second"
    },
    "snippet-parsejsdt": {
        "prefix": "parsejsdt",
        "body": "func parseJsDt(t string) (time.Time, error) {\n\tpt, err := time.Parse(\"Mon Jan 02 2006 15:04:05 GMT-0700 (MST)\", t)\n\tif err != nil {\n\t\treturn time.Time{}, err\n\t}\n\treturn pt.UTC(), nil\n}",
        "description": "Parse JS datetime"
    },
    "snippet-parsemysqldt": {
        "prefix": "parsemysqldt",
        "body": "func parseMysqlDt(t string) (time.Time, error) {\n\tpt, err := time.Parse(\"2006-01-02 15:04:05\", t)\n\tif err != nil {\n\t\treturn time.Time{}, err\n\t}\n\treturn pt.UTC(), nil\n}",
        "description": "Parse MySQL datetime"
    }
}